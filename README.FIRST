SETUP HOBBIT WORKSPACE FOR PT2

- install ROS HYDRO on your Ubuntu 12.04 operating system (wiki.ros.org/hydro/Installation/Ubuntu)
- make a catkin workspace for hobbit PT2 (I have it at /opt/ros/):
  >> mkdir -p ./hobbit_hydro_src
  >> cd hobbit_hydro_src
  >> catkin_init_workspace
- checkout svn for Hobbit PT2:
  >> svn checkout https://repo.acin.tuwien.ac.at/v4r/trunk/ros/hobbit_hydro_src/ ./src
- you can execute a catkin_make in the workspace folder (hobbit_hydro_src) to generate build and devel files:
  >> catkin_make
  these build and devel folders and files should never be checked in to svn!!

SUBMIT ROS PACKAGES TO HOBBIT PT2 REPOSITORY
- all packages have to use catkin build system of ROS hydro
- package name, description and maintainer has to be maintained in the package.xml file of the package


NAMING CONVENTIONS for Hobbit PT2 are following the standard ROS naming conventions:
http://wiki.ros.org/ROS/Patterns/Conventions  (please read it)


To maintain name changes between PT1 and PT2 (ROS hydro) of Packages/Topics/Services/Messages changes have to be traced here:
https://docs.google.com/spreadsheet/ccc?key=0AhAEJP8DM-RHdERkVElRZzZDYS1Zck9sbkMyWU5Hc0E#gid=4   (if you do not have access to the file, write an email to fischinger@acin.tuwien.ac.at)


=== ROS CONVENTIONS ===
== Summary ==

= Packages =

    - Package names should follow common C variable naming conventions: lower case, start with a letter, use underscore separators, e.g. laser_viewer
    - Package names should be specific enough to identify what the package does. 
    
= Topics / Services =

    - Topic and service names should follow common C variable naming conventions: lower case, with underscore separators, e.g. laser_scan
    - Topic and service names should be reasonably descriptive. If a planner node publishes a message containing its current state, the associated topic should be called planner_state, not just state. 

= Messages =

    - Message files are used to determine the class name of the autogenerated code. As such, they should be CamelCased. e.g. LaserScan.msg
        NOTE: This is an exception to the convention that all filenames are lower case and underscore separated 
    - Message fields should be lowercase with underscore separation. e.g. range_min 

= Nodes =

Nodes have both a type and name. The type is the name of the executable to launch the node. The name is what is passed to other ROS nodes when it starts up. We separate these two concepts because names must be unique, whereas you may have multiple nodes of the same type.

When possible, the default name of a node should follow from the name of the executable used to launch the node. This default name can be remapped at startup to something unique.

Node type names

In general, we encourage the node type names to be short because they are scoped by the package name. For example, if your laser_scan package has a viewer for laser scans, simply call it view (instead of laser_scan_viewer). Thus, when you run it with rosrun, you would type:

rosrun laser_scan view



=== UNITS & COORDINATE SYSTEMS ===

Standard units and coordinate conventions for use in ROS have been formalized here: 
http://www.ros.org/reps/rep-0103.html  (please read it)

== Summary ==

= Base Units =

|-------------------------------|
|Quantity 	|Unit		|
|length 	|meter		|
|mass 		|kilogram	|
|time 		|second		|
|current 	|ampere		|
|-------------------------------|

= Coordinate Frames =
should follow these conventions.

All systems are right handed (comply with the right hand rule).

Axis Orientation

In relation to a body the standard is :

    x forward
    y left
    z up

In the case of cameras, there is often a second frame defined with a "_optical" suffix. This uses a slightly different convention:

    z forward
    x right
    y down




### launching ros nodes
 
every ros package has to provide a "launch" folder with ".launch" files, where at least one of them is called "startup.launch", which starts the default behaviour.

### launching project

there is a "launch" folder in the hobbit stack ( root folder ), where a launch_all.launch file is to be found. this is for the actual demo, but for testing, a way more convenient way
of opening separate console windows and starting the ros nodes is to run the "openroswindows" script ( start it and do not touch keyboard or mouse for a few seconds while the windows pop up )
requires xdotool ( install via ubuntu package manager )


IDE's
http://www.ros.org/wiki/IDEs

if you don't have one, we would suggest eclipse ( install instructions : http://www.ros.org/wiki/IDEs#Eclipse )
with catkin, you can use (in the package root folder):
>> catkin_make --force-cmake -G"Eclipse CDT4 - Unix Makefiles"
to create the project data that a project can be imported to eclipse
then "import existing project into workspace"

 
