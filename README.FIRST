SETUP HOBBIT WORKSPACE FOR PT2

- install ROS HYDRO on your Ubuntu 12.04 operating system (wiki.ros.org/hydro/Installation/Ubuntu)
- install ros-hydro-qt-build:
  >> sudo apt-get install ros-hydro-qt-build
- If you want to use smach_viewer install dotx
  >> sudo apt-get install ros-hydro-xdot
- Netcat6 is needed for the head's startup procedure
  >> sudo apt-get install netcat6
- Install packages for new head servos
  >> sudo apt-get install ros-hydro-dynamixel-msgs ros-hydro-dynamixel-controllers

  In order to install openni2 camera drivers etc ( needed for RGBDAcquisition node ) and in order for the openni2 camera service 
  >> sudo apt-get install ros-hydro-openni2-camera ros-hydro-openni2-launch imagemagick
- install ROS joystick module
  >> sudo apt-get install ros-hydro-joy
- install cmake modules, ccmake and dependencies for FAAT
  >> sudo apt-get install ros-hydro-cmake-modules cmake-curses-gui libsuitesparse-dev libglew-dev
- install python pip and python crontab
  >> sudo apt-get install python-pip
  >> sudo pip install python-crontab
- download and build the needed PCL fork for object recognition
  >> mkdir /opt/ros/acin/
  >> cd /opt/ros/acin/
  >> git clone https://github.com/arbeitor/pcl.git --branch reconstruction_workshop
  >> mkdir /opt/ros/acin/pcl/build
  >> cd /opt/ros/acin/pcl/build
  >> ccmake ..
    [hit c]
    [set BUILD_apps ON]
    [hit c,c,g]
    Errors could emerge. I think you can ignore all of them by hitting e.
  >> make -j8
  
  >> cd /opt/ros/acin/
  >> svn co https://repo.acin.tuwien.ac.at/v4r/trunk/faat_framework/
- Change line 157 in file /opt/ros/acin/faat_framework/CMakeLists.txt from add_subdirectory(tests) to #add_subdirectory(tests)
  >> mkdir /opt/ros/acin/faat_framework/build
  >> cd /opt/ros/acin/faat_framework/build
  >> ccmake .. -DPCL_DIR=/opt/ros/acin/pcl/build -DPCL_SOURCE_DIR=/opt/ros/acin/pcl -DFAAT_PCL_USE_CUDA=OFF
  [hit c,c,g]
    Errors could emerge. I think you can ignore all of them by hitting e.
  >> make -j8

- checkout code and make a catkin workspace for hobbit PT2 (I have it at /opt/ros/):
  >> cd /opt/ros/
  >> mkdir ./hobbit_hydro
  >> cd hobbit_hydro
  (checkout svn for Hobbit PT2:)
  >> svn checkout https://repo.acin.tuwien.ac.at/v4r/trunk/ros/hobbit_hydro_src/ ./src
  >> cd src
  >> catkin_init_workspace
- you can execute a catkin_make in the workspace folder (hobbit_hydro) to generate build and devel files:
  >> cd ..
  >> catkin_make -DPCL_DIR=/opt/ros/acin/pcl/build -DFAAT_PCL_DIR=/opt/ros/acin/faat_framework/ --pkg recognizer_msg_and_services
  >> catkin_make -DPCL_DIR=/opt/ros/acin/pcl/build -DFAAT_PCL_DIR=/opt/ros/acin/faat_framework/ --pkg recognition_service
  These build and devel folders and files should never be checked in to svn!! 
  Also the file CMakeLists.txt in the folder /src should never be checked in since it's generated by catkin_make

  catkin_make uses suboptimal settings for compiling by default (debug mode), use optimized settings for release using:
  In case of non-build action, service or message header files recompile with the -k flag added to catkin_make
  >> catkin_makeÂ -DCMAKE_BUILD_TYPE=Release
 
  If you do not have Mira installed add a CATKIN_IGNORE file to the package interfaces_mira
 
  You need to declare the hobbit id on ~/.bashrc by appending a line like
  #set HobbitID
  export hobbit_id="PT2x"
  where x is a,b,c,d,e.. etc


  Finally to enable auto-start scripts , and set-up several things that need super user powers (i.e. restarting the XPC through webinterface , etc  )
  you can run src/hobbit_launch/launch/initializeHobbitInstallation.sh

- OpenRAVE is needed for the calculation of the arm movement. 
  INSTALL OPENRAVE:
  >> sudo add-apt-repository ppa:openrave/release
  >> sudo apt-get update
  >> sudo apt-get install openrave
  if there is libbullet missing or in conflict with HACD library:
  >> sudo mv /usr/lib/libHACD.so.2.80 /usr/lib/libHACD_OLD.so.2.80 
  >> sudo dpkg -i --force-overwrite /var/cache/apt/archives/libbullet2.80_2.80.2-ubuntu1~precise1_amd64.deb
  >> sudo apt-get install -f
  type 
  >> openrave
  to see if installation was succesful


ENABLING PERMANENT PASSWORD/CERTIFICATE STORAGE FOR SVN

Step 1 :

sudo nano ~/.subversion/servers

and change

# Password / passphrase caching parameters:
store-passwords = yes
store-plaintext-passwords = yes

Ctrl+X
and Y to save


Step 2 :

sudo /bin/bash
cd  ~/.subversion/auth/
mv svn.ssl.server svn.ssl.serverOLD
cd ..
chown -R demo auth/


Next time you svn update or commit , select p for permanant certificate storage and enter the codes once..
This should make things work with only the user password ( as they should be :) ) 


ACTIVATE LEARNING/TRAINING OBJECTS OVER NIGHT AS CRONJOB
Activate cronjob for learning objects (done during the night):
For building the 3d-models of learned objects a small bash script should be executed every morning at 2 AM. Therefore the following line has to be added at the end of the file that is opened with the command:  crontab -e 
        0 2 * * * /opt/ros/hobbit_hydro/src/hobbit_smach/src/LearnObject/model_cronjob.sh




SUBMIT ROS PACKAGES TO HOBBIT PT2 REPOSITORY
- all packages have to use catkin build system of ROS hydro
- package name, description and maintainer has to be maintained in the package.xml file of the package


NAMING CONVENTIONS for Hobbit PT2 are following the standard ROS naming conventions:
http://wiki.ros.org/ROS/Patterns/Conventions  (please read it)


To maintain name changes between PT1 and PT2 (ROS hydro) of Packages/Topics/Services/Messages changes have to be traced here:
https://docs.google.com/spreadsheet/ccc?key=0AhAEJP8DM-RHdERkVElRZzZDYS1Zck9sbkMyWU5Hc0E#gid=4   (if you do not have access to the file, write an email to fischinger@acin.tuwien.ac.at)


=== ROS CONVENTIONS ===
== Summary ==

= Packages =

    - Package names should follow common C variable naming conventions: lower case, start with a letter, use underscore separators, e.g. laser_viewer
    - Package names should be specific enough to identify what the package does. 
    
= Topics / Services =

    - Topic and service names should follow common C variable naming conventions: lower case, with underscore separators, e.g. laser_scan
    - Topic and service names should be reasonably descriptive. If a planner node publishes a message containing its current state, the associated topic should be called planner_state, not just state. 

= Messages =

    - Message files are used to determine the class name of the autogenerated code. As such, they should be CamelCased. e.g. LaserScan.msg
        NOTE: This is an exception to the convention that all filenames are lower case and underscore separated 
    - Message fields should be lowercase with underscore separation. e.g. range_min 

= Nodes =

Nodes have both a type and name. The type is the name of the executable to launch the node. The name is what is passed to other ROS nodes when it starts up. We separate these two concepts because names must be unique, whereas you may have multiple nodes of the same type.

When possible, the default name of a node should follow from the name of the executable used to launch the node. This default name can be remapped at startup to something unique.

Node type names

In general, we encourage the node type names to be short because they are scoped by the package name. For example, if your laser_scan package has a viewer for laser scans, simply call it view (instead of laser_scan_viewer). Thus, when you run it with rosrun, you would type:

rosrun laser_scan view



=== UNITS & COORDINATE SYSTEMS ===

Standard units and coordinate conventions for use in ROS have been formalized here: 
http://www.ros.org/reps/rep-0103.html  (please read it)

== Summary ==

= Base Units =

|-------------------------------|
|Quantity 	|Unit		|
|length 	|meter		|
|mass 		|kilogram	|
|time 		|second		|
|current 	|ampere		|
|-------------------------------|

= Coordinate Frames =
should follow these conventions.

All systems are right handed (comply with the right hand rule).

Axis Orientation

In relation to a body the standard is :

    x forward
    y left
    z up

In the case of cameras, there is often a second frame defined with a "_optical" suffix. This uses a slightly different convention:

    z forward
    x right
    y down




### launching ros nodes
 
every ros package has to provide a "launch" folder with ".launch" files, where at least one of them is called "startup.launch", which starts the default behaviour.

### launching project

there is a "launch" folder in the hobbit stack ( root folder ), where a launch_all.launch file is to be found. this is for the actual demo, but for testing, a way more convenient way
of opening separate console windows and starting the ros nodes is to run the "openroswindows" script ( start it and do not touch keyboard or mouse for a few seconds while the windows pop up )
requires xdotool ( install via ubuntu package manager )


IDE's
http://www.ros.org/wiki/IDEs

if you don't have one, we would suggest eclipse ( install instructions : http://www.ros.org/wiki/IDEs#Eclipse )
with catkin, you can use (in the package root folder):
>> catkin_make --force-cmake -G"Eclipse CDT4 - Unix Makefiles"
to create the project data that a project can be imported to eclipse
then "import existing project into workspace"

 
